/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature dummy_feature;
nonterminal Formals formals_list;
nonterminal comp comp_sem;
nonterminal Formal formal_sem;
nonterminal formalc formalc_sem;
nonterminal method method_sem;
nonterminal attr attr_sem;
nonterminal Formals formal_list;
nonterminal Expression expr;
nonterminal Expressions expr_list;
nonterminal assign assign_sem;
nonterminal plus plus_sem;
nonterminal sub sub_sem;
nonterminal mul mul_sem;
nonterminal divide divide_sem;
nonterminal neg neg_sem;
nonterminal lt lt_sem;
nonterminal eq eq_sem;
nonterminal leq leq_sem;
nonterminal no_expr no_expr_sem;
nonterminal cond cond_sem;
nonterminal loop loop_sem;
nonterminal block block_sem;
nonterminal new_ new_sem;
nonterminal isvoid isvoid_sem;
nonterminal object object_sem;
nonterminal int_const int_const_sem;
nonterminal str_const str_const_sem;
nonterminal bool_const bool_const_sem;
nonterminal typcase typcase_sem;
nonterminal Cases cases_sem;
nonterminal dispatch dispatch_sem;
nonterminal static_dispatch static_dispatch_sem;
nonterminal branch branch_sem;

/* Precedence declarations go here. */

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	| error;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error SEMI;

formals_list
	::= /* empty */
	{: RESULT = new Formals(curr_lineno()); :}
	|
	formal_sem:f
	{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	|
	formals_list:fl COMMA formal_sem:f
	{: RESULT = fl.appendElement(f); :};

formal_sem
	::= OBJECTID:oi COLON TYPEID:ti
	{: RESULT = new formalc(curr_lineno(), oi, ti); :};

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	{: RESULT = new Features(curr_lineno()); :}
	|
	dummy_feature:df
	{: RESULT = (new Features(curr_lineno())).appendElement(df); :}
	|
	dummy_feature_list:dfl dummy_feature:df
	{: RESULT = dfl.appendElement(df); :}
	|
	error;

dummy_feature
	::= OBJECTID:o LPAREN formals_list:f RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI
	{: RESULT = new method(curr_lineno(), o, f, t, e); :}
	|
	OBJECTID:o COLON TYPEID:t ASSIGN expr:e SEMI
	{: RESULT = new attr(curr_lineno(), o, t, e); :}
	|
	OBJECTID:o COLON TYPEID:t SEMI
	{: RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); :}
	;

cases_sem
	::= branch_sem:bs
	{: RESULT = (new Cases(curr_lineno())).appendElement(bs); :}
	|
	cases_sem:cs branch_sem:bs
	{: RESULT = cs.appendElement(bs); :}
	|
	error;

branch_sem
	::= OBJECTID:o COLON TYPEID:t DARROW expr:e SEMI
	{: RESULT = new branch(curr_lineno(), o, t, e); :};

expr_list
	::= /* empty */
	{: RESULT = new Expressions(curr_lineno()); :}
	|
	expr:e SEMI
	{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	|
	expr:e
	{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	|
	expr_list:el COMMA expr:e
	{: RESULT = el.appendElement(e); :}
	|
	expr_list:el expr:e SEMI
	{: RESULT = el.appendElement(e); :};

expr
	::= OBJECTID:n ASSIGN expr:e
	{: RESULT = new assign(curr_lineno(), n, e); :}
	|
	OBJECTID:o LPAREN RPAREN
	{: RESULT = new object(curr_lineno(), o); :}
	|
	OBJECTID:o LPAREN expr_list:el RPAREN
	{: RESULT = new dispatch(curr_lineno(), new no_expr(curr_lineno()), o, el); :}
	|
	expr:e DOT OBJECTID:o LPAREN expr_list:el RPAREN
	{: RESULT = new dispatch(curr_lineno(), e, o, el); :}
	|
	expr:e AT TYPEID:t DOT OBJECTID:o LPAREN expr_list:el RPAREN
	{: RESULT = new static_dispatch(curr_lineno(), e, t, o, el); :}
	|
	IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
	{: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
	|
	WHILE expr:e1 LOOP expr:e2 POOL
	{: RESULT = new loop(curr_lineno(), e1, e2);  :}
	|
	LBRACE expr_list:e RBRACE
	{: RESULT = new block(curr_lineno(), e); :}
	|
	LET OBJECTID:n COLON TYPEID:p ASSIGN expr:e1 IN expr:e2
	{: RESULT = new let(curr_lineno(), n, p, e1, e2); :}
	|
	LET OBJECTID:n COLON TYPEID:p IN expr:e1
	{: RESULT = new let(curr_lineno(), n, p, new no_expr(curr_lineno()), e1); :}
	|
	CASE expr:e OF cases_sem:c ESAC
	{: RESULT = new typcase(curr_lineno(), e, c); :}
	|
	NEW TYPEID:n
	{: RESULT = new new_(curr_lineno(), n); :}
	|
	ISVOID expr:e
	{: RESULT = new isvoid(curr_lineno(), e); :}
	|
	expr:e1 PLUS expr:e2
	{: RESULT = new plus(curr_lineno(), e1, e2); :}
	|
	expr:e1 MINUS expr:e2
	{: RESULT = new sub(curr_lineno(), e1, e2); :}
	|
	expr:e1 MULT expr:e2
	{: RESULT = new mul(curr_lineno(), e1, e2); :}
	|
	expr:e1 DIV expr:e2
	{: RESULT = new divide(curr_lineno(), e1, e2); :}
	|
	NEG expr:e
	{: RESULT = new neg(curr_lineno(), e);  :}
	|
	expr:e1 LT expr:e2
	{: RESULT = new lt(curr_lineno(), e1, e2); :}
	|
	expr:e1 LE expr:e2
	{: RESULT = new leq(curr_lineno(), e1, e2); :}
	|
	expr:e1 EQ expr:e2
	{: RESULT = new eq(curr_lineno(), e1, e2); :}
	|
	NOT expr:e
	{: RESULT = new comp(curr_lineno(), e); :}
	|
	LPAREN expr_list:e RPAREN
	{: RESULT = new block(curr_lineno(), e); :}
	|
	OBJECTID:n
	{: RESULT = new object(curr_lineno(), n); :}
	|
	INT_CONST:p
	{: RESULT = new int_const(curr_lineno(), p); :}
	|
	STR_CONST:p
	{: RESULT = new string_const(curr_lineno(), p); :}
	|
	BOOL_CONST:p
	{: RESULT = new bool_const(curr_lineno(), p); :};
	